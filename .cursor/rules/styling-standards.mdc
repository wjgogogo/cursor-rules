---
description: 
globs: *.js,*.jsx,*.ts,*.tsx,*.css,*.less
alwaysApply: false
---
# 样式规范

## 核心原则

【必须】遵循：
- 优先使用 Tailwind CSS 原子类
- 使用 shadcn/ui 作为 UI 基础
- **严格遵循移动优先响应式设计**
- 支持暗模式和可访问性

## Tailwind CSS 使用

【必须】移动优先响应式设计：

```tsx
// ✅ 正确 - 移动优先响应式
<div className="
  flex flex-col gap-4 p-4
  sm:gap-6 sm:p-6
  md:flex-row md:gap-8 md:p-8
  lg:gap-12 lg:p-12
">
  <div className="w-full md:w-1/3 lg:w-1/4">
    {/* 侧边栏 */}
  </div>
  <div className="w-full md:w-2/3 lg:w-3/4">
    {/* 主内容 */}
  </div>
</div>

// ❌ 错误 - 混合内联样式
<div className="flex" style={{ padding: '1rem' }}>
  {/* 避免混合使用 */}
</div>

// ❌ 错误 - 桌面优先
<div className="flex-row lg:flex-col p-8 sm:p-4">
  {/* 应该从小到大设计 */}
</div>
```

## shadcn/ui 组件

【必须】使用 shadcn/ui 作为基础：

```tsx
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

// ✅ 正确 - shadcn/ui + Tailwind 微调
function UserCard({ user }: { user: User }) {
  return (
    <Card className="w-full md:w-96">
      <CardHeader>
        <CardTitle className="text-lg">{user.name}</CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <Input 
          value={user.email} 
          readOnly 
          className="bg-muted"
        />
        <Button className="w-full">
          编辑用户
        </Button>
      </CardContent>
    </Card>
  );
}
```

## 设计系统基础

【必须】使用统一的设计令牌：

```tsx
// ✅ 正确 - 字体层级
<div className="space-y-6">
  <h1 className="text-4xl font-bold tracking-tight lg:text-5xl">
    主标题
  </h1>
  <h2 className="text-3xl font-semibold tracking-tight">
    次标题
  </h2>
  <h3 className="text-2xl font-semibold">
    三级标题
  </h3>
  <p className="text-base leading-7">
    正文内容
  </p>
  <p className="text-sm text-muted-foreground">
    辅助文本
  </p>
</div>

// ✅ 正确 - 间距系统
<div className="space-y-6">
  <section className="space-y-4">
    <h2 className="mb-2">标题</h2>
    <p className="mb-4">段落</p>
    <div className="flex gap-2">
      <Button>按钮1</Button>
      <Button>按钮2</Button>
    </div>
  </section>
</div>
```

## 状态和变体

【必须】统一状态表示：

```tsx
// ✅ 正确 - 按钮变体
<div className="flex flex-wrap gap-2">
  <Button variant="default">默认按钮</Button>
  <Button variant="outline">轮廓按钮</Button>
  <Button variant="destructive">危险按钮</Button>
  <Button variant="ghost">幽灵按钮</Button>
  <Button variant="secondary">次要按钮</Button>
</div>

// ✅ 正确 - 状态指示
<div className="space-y-2">
  {/* 加载状态 */}
  <Button disabled className="opacity-50">
    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
    加载中...
  </Button>
  
  {/* 成功状态 */}
  <div className="flex items-center gap-2 text-green-600 dark:text-green-400">
    <CheckCircle className="h-4 w-4" />
    操作成功
  </div>
  
  {/* 错误状态 */}
  <div className="flex items-center gap-2 text-red-600 dark:text-red-400">
    <AlertCircle className="h-4 w-4" />
    操作失败
  </div>
</div>
```

## 暗模式支持

【必须】使用设计系统颜色变量：

```tsx
// ✅ 正确 - 主题响应式颜色
<div className="bg-background text-foreground border border-border rounded-lg p-6">
  <h2 className="text-foreground mb-4">标题</h2>
  <p className="text-muted-foreground mb-4">
    描述文本
  </p>
  <Button className="bg-primary text-primary-foreground hover:bg-primary/90">
    主要操作
  </Button>
</div>

// ✅ 正确 - 手动暗模式类
<div className="bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100">
  <p>自动适应主题的内容</p>
</div>
```

## 可访问性基础

【必须】确保基本可访问性：

```tsx
// ✅ 正确 - 焦点管理
<button className="
  px-4 py-2 rounded-md
  focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2
">
  可访问按钮
</button>

// ✅ 正确 - 语义化标记
<nav aria-label="主导航">
  <ul className="flex space-x-4">
    <li>
      <a 
        href="/home" 
        className="text-foreground hover:text-primary transition-colors"
        aria-current="page"
      >
        首页
      </a>
    </li>
  </ul>
</nav>

// ✅ 正确 - 屏幕阅读器支持
<button 
  aria-expanded={isOpen}
  aria-controls="dropdown-menu"
  className="flex items-center gap-2"
>
  菜单 <ChevronDown className="h-4 w-4" />
</button>
```

## 动画和过渡

【推荐】使用一致的过渡效果：

```tsx
// ✅ 正确 - 标准过渡
<div className="
  transition-all duration-200 ease-in-out
  hover:scale-105 hover:shadow-lg
  focus:scale-105 focus:shadow-lg
">
  交互卡片
</div>

// ✅ 正确 - 页面切换
<div className="animate-in fade-in-0 slide-in-from-bottom-2 duration-300">
  页面内容
</div>

// ✅ 正确 - 尊重用户偏好
<div className="
  motion-safe:transition-transform motion-safe:duration-300
  motion-reduce:transition-none
">
  尊重减少动画偏好
</div>
```

## 响应式布局 [P0]

【必须】移动优先网格系统：

```tsx
// ✅ 正确 - 响应式网格
<div className="
  grid grid-cols-1 gap-4 p-4
  sm:grid-cols-2 sm:gap-6 sm:p-6
  md:grid-cols-3 md:gap-8 md:p-8
  lg:grid-cols-4 lg:gap-12 lg:p-12
">
  {items.map(item => (
    <Card key={item.id} className="w-full">
      <CardContent className="p-4">
        <h3 className="text-lg font-semibold mb-2">{item.title}</h3>
        <p className="text-muted-foreground">{item.description}</p>
      </CardContent>
    </Card>
  ))}
</div>

// ✅ 正确 - 响应式容器
<main className="
  container mx-auto px-4 py-8
  sm:px-6 sm:py-12
  lg:px-8 lg:py-16
">
  {/* 页面内容 */}
</main>

// ✅ 正确 - 复杂响应式布局示例
<div className="min-h-screen flex flex-col bg-muted/40">
  {/* Header */}
  <header className="sticky top-0 z-30 flex h-14 items-center gap-4 border-b bg-background px-4 sm:static sm:h-auto sm:border-0 sm:bg-transparent sm:px-6">
    {/* Header content */}
  </header>

  <div className="flex flex-col sm:gap-4 sm:py-4 sm:pl-14">
    {/* Main content area with potential sidebar and right aside */}
    <div className="grid flex-1 items-start gap-4 p-4 sm:px-6 sm:py-0 md:gap-8 lg:grid-cols-3 xl:grid-cols-3">
      {/* Left Sidebar (optional or primary navigation for larger screens) */}
      <aside className="hidden lg:col-span-1 lg:block sticky top-16 self-start">
        {/* Sidebar navigation or content */}
      </aside>

      {/* Main Content */}
      <main className="grid auto-rows-max items-start gap-4 md:gap-8 lg:col-span-2">
        {/* Main page content, e.g., cards, forms, tables */}
        <div className="grid gap-4 sm:grid-cols-2 md:grid-cols-4 lg:grid-cols-2 xl:grid-cols-4">
          {/* Example cards */}
        </div>
      </main>

      {/* Right Aside (optional, for contextual info or actions) */}
      <aside className="hidden xl:col-span-1 xl:block sticky top-16 self-start">
        {/* Right aside content */}
      </aside>
    </div>
  </div>
</div>
```

## 表单样式

【必须】统一表单元素样式：

```tsx
// ✅ 正确 - 表单布局
<form className="space-y-6 max-w-md mx-auto">
  <div className="space-y-2">
    <label htmlFor="name" className="text-sm font-medium">
      姓名
    </label>
    <Input 
      id="name"
      placeholder="请输入姓名"
      className="w-full"
    />
  </div>
  
  <div className="space-y-2">
    <label htmlFor="email" className="text-sm font-medium">
      邮箱
    </label>
    <Input 
      id="email"
      type="email"
      placeholder="请输入邮箱"
      className="w-full"
    />
  </div>
  
  <Button type="submit" className="w-full">
    提交
  </Button>
</form>
```

## 🔍 检查清单

在编写和审查样式相关代码时，请对照以下检查项：

### 核心原则与技术选型 [P0]
- [ ] **[P0]** Tailwind CSS 优先：是否主要使用 Tailwind CSS 的原子类来构建样式，避免了自定义 CSS 或内联样式（除非必要且已封装）？
- [ ] **[P0]** shadcn/ui 基础：是否基于 shadcn/ui 组件库进行 UI 构建，并在此基础上进行定制和扩展？
- [ ] **[P0]** 移动优先响应式设计：所有样式和布局是否严格遵循移动优先原则（即默认样式针对小屏幕，然后通过 `sm:`, `md:`, `lg:`, `xl:` 等断点逐步增强大屏幕样式）？
- [ ] **[P0]** 响应式布局实现：是否有效使用了 Tailwind 的响应式变体（如 `md:flex-row`）和网格系统 (`grid`, `grid-cols-*`) 来创建适应不同屏幕尺寸的布局？

### 设计系统与一致性 [P1]
- [ ] **[P1]** 设计令牌：是否使用了项目 `tailwind.config.js` 中定义的设计令牌（如颜色 `bg-primary`, `text-foreground`；间距 `gap-4`, `p-6`；字体 `text-lg`, `font-semibold`）而非魔术数字或硬编码值？
- [ ] **[P1]** 组件状态与变体：组件的各种状态（如 `disabled`, `hover`, `focus`, 加载中）和变体（如 `variant='outline'`）是否通过 Tailwind 类或 shadcn/ui 的 props 清晰、一致地表达？
- [ ] **[P1]** 暗模式支持：组件和页面是否能正确响应暗模式切换，使用了设计系统中定义的暗模式颜色变量（如 `dark:bg-gray-900` 或通过 CSS 变量）？

### 可访问性 (A11y) [P1]
- [ ] **[P1]** 焦点可见性：所有可交互元素（按钮、链接、输入框等）在获得焦点时是否有清晰的视觉指示（如 `focus:ring-2`）？
- [ ] **[P1]** 语义化 HTML：是否使用了正确的 HTML5 语义化标签（如 `<nav>`, `<main>`, `<aside>`, `<article>`, `<button>`）来构建页面结构？
- [ ] **[P1]** ARIA 属性：是否在必要时（如自定义组件、动态内容更新）使用了恰当的 ARIA 属性（如 `aria-label`, `aria-expanded`, `role`）来增强屏幕阅读器的可访问性？
- [ ] **[P1]** 颜色对比度：文本内容与其背景色之间是否有足够的颜色对比度，符合 WCAG AA 级标准？

### 动画与过渡 [P2]
- [ ] **[P2]** 过渡效果：UI 中的过渡和动画效果是否平滑、一致，并使用了 Tailwind 的过渡工具类（如 `transition-all`, `duration-200`, `ease-in-out`）？
- [ ] **[P2]** 尊重用户偏好：动画效果是否考虑了 `prefers-reduced-motion` 用户偏好，对希望减少动画的用户提供了降级或无动画版本 (`motion-safe:`, `motion-reduce:`)？

### 代码组织与维护 [P2]
- [ ] **[P2]** Tailwind 类名排序：是否使用了 Prettier 插件 (如 `prettier-plugin-tailwindcss`) 自动排序 Tailwind 类名以提高可读性和一致性？
- [ ] **[P2]** `@apply` 使用限制：是否避免了过度使用 `@apply`，仅在确实需要封装一组常用原子类且无法通过组件化解决时才谨慎使用？
