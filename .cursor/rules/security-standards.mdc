---
description: 
globs: 
alwaysApply: false
---
# 安全规范

## 核心原则 [P0]

【必须】遵循：
- 验证所有用户输入
- 防止 XSS 和 CSRF 攻击
- 安全处理敏感数据
- 实现安全的认证机制

## 输入验证

【必须】验证所有用户输入：

```tsx
import { z } from 'zod';

// ✅ 正确 - 使用 Zod 验证
const UserInputSchema = z.object({
  name: z.string().min(1).max(100).regex(/^[a-zA-Z\s]+$/),
  email: z.string().email(),
  age: z.number().int().min(0).max(150),
  website: z.string().url().optional(),
});

function validateUserInput(input: unknown) {
  try {
    return UserInputSchema.parse(input);
  } catch (error) {
    throw new Error('输入验证失败');
  }
}

// ✅ 正确 - 表单验证
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';

function UserForm() {
  const form = useForm({
    resolver: zodResolver(UserInputSchema),
  });

  const onSubmit = (data: z.infer<typeof UserInputSchema>) => {
    // 数据已验证，可安全使用
    submitUser(data);
  };

  return (
    <form onSubmit={form.handleSubmit(onSubmit)}>
      <input {...form.register('name')} placeholder="姓名" />
      <input {...form.register('email')} type="email" placeholder="邮箱" />
      <button type="submit">提交</button>
    </form>
  );
}

// ❌ 错误 - 未验证输入
function badSubmit(data: any) {
  fetch('/api/users', {
    method: 'POST',
    body: JSON.stringify(data), // 危险！未验证
  });
}
```

## XSS 防护

【必须】防止跨站脚本攻击：

```tsx
import DOMPurify from 'dompurify';

// ✅ 正确 - React 自动转义
function SafeComponent({ userContent }: { userContent: string }) {
  return (
    <div>
      {/* React 自动转义，安全 */}
      <p>{userContent}</p>
      
      {/* 如需插入 HTML，使用 DOMPurify 清理 */}
      <div 
        dangerouslySetInnerHTML={{
          __html: DOMPurify.sanitize(userContent)
        }}
      />
    </div>
  );
}

// ✅ 正确 - 内容安全策略 (CSP)
// 在 Next.js 中配置
const nextConfig = {
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          {
            key: 'Content-Security-Policy',
            value: "default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline';"
          },
        ],
      },
    ];
  },
};

// ❌ 错误 - 直接插入用户内容
function DangerousComponent({ userContent }: { userContent: string }) {
  return (
    <div 
      dangerouslySetInnerHTML={{ __html: userContent }} // 危险！
    />
  );
}
```

## CSRF 防护

【必须】防止跨站请求伪造：

```tsx
// ✅ 正确 - API 请求添加 CSRF 保护
const api = axios.create({
  baseURL: '/api',
  headers: {
    'X-Requested-With': 'XMLHttpRequest',
  },
});

// 添加 CSRF token
api.interceptors.request.use((config) => {
  const token = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
  if (token) {
    config.headers['X-CSRF-Token'] = token;
  }
  return config;
});

// ✅ 正确 - SameSite Cookie 设置
// 服务端配置
app.use(session({
  cookie: {
    sameSite: 'strict',
    secure: true, // HTTPS 环境
    httpOnly: true,
  }
}));
```

## 敏感数据处理

【必须】安全处理敏感信息：

```tsx
// ✅ 正确 - 环境变量管理
// .env.local (不提交到版本控制)
NEXT_PUBLIC_API_URL=https://api.example.com
DATABASE_URL=postgresql://...
JWT_SECRET=your-secret-key

// ✅ 正确 - 安全的认证状态管理
function useAuth() {
  const [user, setUser] = useState<User | null>(null);

  const login = async (credentials: LoginCredentials) => {
    const response = await fetch('/api/auth/login', {
      method: 'POST',
      credentials: 'include', // 使用 httpOnly cookie
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(credentials),
    });
    
    if (response.ok) {
      const userData = await response.json();
      setUser(userData);
    }
  };

  const logout = async () => {
    await fetch('/api/auth/logout', {
      method: 'POST',
      credentials: 'include',
    });
    setUser(null);
  };

  return { user, login, logout };
}

// ✅ 正确 - 密码输入处理
function PasswordInput() {
  const [password, setPassword] = useState('');
  
  const handleSubmit = (e: FormEvent) => {
    e.preventDefault();
    submitPassword(password);
    setPassword(''); // 提交后立即清理
  };

  return (
    <input
      type="password"
      value={password}
      onChange={(e) => setPassword(e.target.value)}
      autoComplete="current-password"
    />
  );
}

// ❌ 错误 - 敏感数据存储
localStorage.setItem('token', jwtToken); // 危险！
console.log('Password:', password); // 危险！
```

## API 安全

【必须】确保 API 调用安全：

```tsx
// ✅ 正确 - 安全的 API 客户端
const secureApi = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// 请求拦截器
secureApi.interceptors.request.use((config) => {
  const token = getAuthToken();
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

// 响应拦截器
secureApi.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401) {
      redirectToLogin();
    }
    return Promise.reject(error);
  }
);

// ✅ 正确 - 基础速率限制
const requestCounts = new Map<string, number>();

function rateLimit(key: string, maxRequests: number, windowMs: number) {
  const now = Date.now();
  const count = requestCounts.get(key) || 0;
  
  if (count >= maxRequests) {
    throw new Error('Too many requests');
  }
  
  requestCounts.set(key, count + 1);
  
  setTimeout(() => {
    requestCounts.delete(key);
  }, windowMs);
}
```

## 路由保护

【必须】保护敏感路由：

```tsx
// ✅ 正确 - 路由保护组件
function ProtectedRoute({ children, requiredRole }: {
  children: React.ReactNode;
  requiredRole?: string;
}) {
  const { user } = useAuth();
  
  if (!user) {
    return <Navigate to="/login" replace />;
  }
  
  if (requiredRole && user.role !== requiredRole) {
    return <div>权限不足</div>;
  }
  
  return <>{children}</>;
}

// ✅ 使用示例
function App() {
  return (
    <Routes>
      <Route path="/login" element={<LoginPage />} />
      <Route path="/dashboard" element={
        <ProtectedRoute>
          <Dashboard />
        </ProtectedRoute>
      } />
      <Route path="/admin" element={
        <ProtectedRoute requiredRole="admin">
          <AdminPanel />
        </ProtectedRoute>
      } />
    </Routes>
  );
}
```

## 依赖安全

【推荐】定期检查依赖安全：

```json
// package.json 安全脚本
{
  "scripts": {
    "audit": "npm audit",
    "audit:fix": "npm audit fix",
    "security:check": "npm audit --audit-level=moderate"
  }
}
```

## 安全头配置

【必须】设置安全响应头：

```tsx
// ✅ 正确 - Next.js 安全头配置
const nextConfig = {
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff'
          },
          {
            key: 'X-Frame-Options',
            value: 'DENY'
          },
          {
            key: 'X-XSS-Protection',
            value: '1; mode=block'
          },
          {
            key: 'Strict-Transport-Security',
            value: 'max-age=31536000; includeSubDomains'
          }
        ],
      },
    ];
  },
};
```

## 🔍 检查清单

在开发和审查代码的安全性时，请对照以下检查项：

### 核心防护与数据处理 [P0]
- [ ] **[P0]** 输入验证：所有来自外部（用户、API响应、URL参数等）的输入数据是否都通过 Zod 或类似库进行了严格的格式、类型和范围验证？
- [ ] **[P0]** XSS 防护：
    - 在 React 中渲染用户内容时，是否依赖其默认的转义机制？
    - 若必须使用 `dangerouslySetInnerHTML`，其内容是否经过了 `DOMPurify.sanitize()` 或等效库的严格净化？
- [ ] **[P0]** CSRF 防护：
    - API 请求（特别是执行状态变更的操作）是否包含了 CSRF Token 或其他有效的 CSRF 防护机制（如 `X-Requested-With` header 校验，SameSite Cookie 属性）？
    - Session Cookie 是否配置了 `SameSite=Strict` (或 `Lax`，根据需求) 和 `HttpOnly` 属性？
- [ ] **[P0]** 敏感数据处理：
    - 敏感密钥、API Tokens、数据库凭证等是否从不硬编码在前端代码中，而是通过环境变量（如 `.env.local`，且不提交到版本库）管理，并通过后端传递给前端（如果必要且安全的话）？
    - 是否避免在 `localStorage` 或 `sessionStorage` 中存储高度敏感信息（如 JWT tokens，除非有特定安全措施）？
    - 密码等敏感信息在表单提交后是否立即从内存中清除？
- [ ] **[P0]** API 安全：
    - API 客户端（如 Axios 实例）是否配置了超时和必要的安全头部（如 `Content-Type`）？
    - API 请求是否在拦截器中统一添加了认证凭证（如 Bearer Token）？
    - API 响应拦截器是否处理了常见的认证错误（如 401 自动跳转登录）？

### 重要安全措施 [P1]
- [ ] **[P1]** 认证与授权：所有需要保护的资源和操作是否都有健全的认证（用户是谁）和授权（用户能做什么）检查？
- [ ] **[P1]** 依赖安全：是否定期（如 CI/CD 流程中或手动）使用 `npm audit`, `pnpm audit` 或 Snyk 等工具检查项目依赖的已知漏洞，并及时更新或替换有风险的包？
- [ ] **[P1]** HTTPS 强制：生产环境应用是否全站启用了 HTTPS，并确保所有资源通过 HTTPS 加载？（通过 HSTS 头增强）
- [ ] **[P1]** 安全日志：对于关键的安全事件（如登录失败、权限拒绝、可疑操作），是否有适当的日志记录机制？

### 进阶与可选增强 [P2]
- [ ] **[P2]** 内容安全策略 (CSP)：是否为应用配置了合理的 CSP HTTP 头部，以限制浏览器可加载和执行的资源，减少 XSS 和数据注入风险？
- [ ] **[P2]** 安全 HTTP 头部：是否使用了如 `helmet` (Node.js) 或等效机制来设置其他重要的安全相关 HTTP 头部（如 `X-Frame-Options`, `X-Content-Type-Options`, `Referrer-Policy`）？
- [ ] **[P2]** 定期安全审计：是否计划或定期对代码库进行专门的安全审计（内部或第三方）？
- [ ] **[P2]** 速率限制与防滥用：API 端点和敏感操作（如登录、注册）是否实施了速率限制以防止暴力破解和滥用？
