---
description: npm 包安装规范
globs: 
alwaysApply: false
---
# npm 包安装规范

## 安装要求

【必须】遵循：
- 优先使用 pnpm，其次 yarn，再次 npm
- 锁定依赖版本，禁止使用 latest
- 全局依赖需说明理由

## 示例

```sh
# ✅ 正确
pnpm add react@18.2.0
npm install axios@1.6.0
```

## Monorepo Workspace 管理

### 工作区配置

【必须】在根目录配置工作区：

```json
// package.json
{
  "name": "my-monorepo",
  "workspaces": [
    "packages/*",
    "apps/*"
  ]
}

// pnpm-workspace.yaml (pnpm)
packages:
  - 'packages/*'
  - 'apps/*'
```

### 依赖安装策略

【必须】遵循：
- **根依赖**：开发工具、构建工具安装在根目录
- **共享依赖**：多个包使用的依赖安装在根目录
- **特定依赖**：只有单个包使用的依赖安装在对应包内

```sh
# ✅ 正确 - 根目录安装开发依赖
pnpm add -w -D typescript@5.0.0 eslint@8.0.0

# ✅ 正确 - 根目录安装共享依赖
pnpm add -w react@18.2.0 react-dom@18.2.0

# ✅ 正确 - 特定包安装依赖
pnpm add --filter @my-app/web axios@1.6.0
pnpm add --filter @my-lib/utils lodash@4.17.21

# ✅ 正确 - 为所有包安装相同依赖
pnpm add -r typescript@5.0.0
```

### 版本管理

【必须】保持版本一致：
- 使用 `pnpm list` 检查依赖版本
- 共享依赖在所有包中使用相同版本
- 使用 `syncpack` 工具同步版本

```sh
# ✅ 正确 - 检查依赖版本
pnpm list --depth=0
pnpm list --filter @my-app/web

# ✅ 正确 - 同步版本
npx syncpack list-mismatches
npx syncpack fix-mismatches
```

### 内部包引用

【必须】使用 workspace 协议：

```json
// packages/web/package.json
{
  "dependencies": {
    "@my-lib/utils": "workspace:*",
    "@my-lib/components": "workspace:^1.0.0"
  }
}
```
