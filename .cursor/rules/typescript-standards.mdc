---
description: 
globs: *.ts,*.tsx
alwaysApply: false
---
# TypeScript 规范

## 核心原则 [P0]

【必须】确保代码质量：
- **类型安全**：所有变量、函数参数和返回值必须定义类型
- **优先使用 `interface`** 定义对象结构
- **禁止使用 `enum`**，使用联合类型替代
- **避免 `any`**，使用 `unknown` + 类型守卫

## 基础类型定义 [P0]

【必须】正确定义类型：

```tsx
// ✅ 正确 - 基础类型定义
interface User {
  id: string;
  name: string;
  email: string;
  role: 'admin' | 'user' | 'guest';
}

// ✅ 正确 - 组件 Props
interface UserCardProps {
  user: User;
  onEdit?: (user: User) => void;
  className?: string;
}

export function UserCard({ user, onEdit, className }: UserCardProps) {
  return (
    <div className={className}>
      <h3>{user.name}</h3>
      <p>{user.email}</p>
      {onEdit && (
        <button onClick={() => onEdit(user)}>编辑</button>
      )}
    </div>
  );
}

// ❌ 错误 - 缺少类型定义
function UserCard(props) {
  return <div>{props.user.name}</div>;
}
```

## 联合类型替代 enum [P0]

【必须】使用联合类型：

```tsx
// ✅ 正确 - 联合类型
type UserRole = 'admin' | 'user' | 'guest';
type Theme = 'light' | 'dark' | 'auto';
type Status = 'pending' | 'loading' | 'success' | 'error';

// ✅ 正确 - 在组件中使用
interface ButtonProps {
  variant: 'primary' | 'secondary' | 'danger';
  size: 'small' | 'medium' | 'large';
  children: React.ReactNode;
}

// ❌ 错误 - 使用 enum
enum UserRole {
  Admin = 'admin',
  User = 'user',
}
```

## 基础工具类型 [P0]

【必须】掌握常用工具类型：

```tsx
// ✅ 正确 - Partial 和 Omit
type CreateUserRequest = Omit<User, 'id'>; // 创建时不需要 id
type UpdateUserRequest = Partial<Pick<User, 'name' | 'email'>>; // 更新时可选

// ✅ 正确 - API 响应类型
interface ApiResponse<T> {
  data: T;
  status: number;
  message: string;
}

// ✅ 正确 - 函数类型
async function updateUser(
  id: string, 
  params: UpdateUserRequest
): Promise<ApiResponse<User>> {
  const response = await fetch(`/api/users/${id}`, {
    method: 'PUT',
    body: JSON.stringify(params),
  });
  return response.json();
}
```

## 类型守卫 [P0]

【必须】安全处理未知类型：

```tsx
// ✅ 正确 - 基础类型守卫
function isString(value: unknown): value is string {
  return typeof value === 'string';
}

function isUser(value: unknown): value is User {
  return (
    typeof value === 'object' &&
    value !== null &&
    'id' in value &&
    'name' in value &&
    'email' in value
  );
}

// ✅ 正确 - 安全的 API 处理
async function fetchUser(id: string): Promise<User> {
  const response = await fetch(`/api/users/${id}`);
  const data: unknown = await response.json();
  
  if (isUser(data)) {
    return data;
  }
  
  throw new Error('Invalid user data');
}

// ❌ 错误 - 使用 any
function processData(data: any) {
  return data.someProperty; // 类型不安全
}

// ❌ 错误 - 危险的非空断言
function getUser(id: string) {
  return users.find(u => u.id === id)!; // 可能抛出错误
}
```

## tsconfig.json 配置 [P0]

【必须】使用严格配置：

```json
{
  "compilerOptions": {
    // 基础配置
    "target": "ES2022",
    "lib": ["DOM", "DOM.Iterable", "ES2022"],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "forceConsistentCasingInFileNames": true,
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",

    // 严格类型检查
    "strict": true,
    "noImplicitAny": true,
    "strictNullChecks": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,

    // 路径映射
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"],
      "@/components/*": ["./src/components/*"],
      "@/hooks/*": ["./src/hooks/*"],
      "@/utils/*": ["./src/utils/*"],
      "@/types/*": ["./src/types/*"]
    }
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist", "build"]
}
```

## 类型导入导出 [P0]

【必须】正确导出和导入类型：

```tsx
// types/user.ts
export interface User {
  id: string;
  name: string;
  email: string;
}

export type UserRole = 'admin' | 'user' | 'guest';

// components/UserCard.tsx
import type { User } from '@/types/user';

interface UserCardProps {
  user: User;
  onUpdate?: (user: User) => void;
}

export function UserCard({ user, onUpdate }: UserCardProps) {
  // 组件实现
}

// services/userService.ts
import type { User } from '@/types/user';

export async function fetchUser(id: string): Promise<User> {
  // API 调用实现
}
```

## React Hook 类型 [P0]

【必须】正确定义 Hook 类型：

```tsx
// ✅ 正确 - useState 类型
const [user, setUser] = useState<User | null>(null);
const [loading, setLoading] = useState<boolean>(false);
const [users, setUsers] = useState<User[]>([]);

// ✅ 正确 - useEffect 依赖
useEffect(() => {
  fetchUser(userId).then(setUser);
}, [userId]); // 明确依赖

// ✅ 正确 - 自定义 Hook
function useLocalStorage<T>(key: string, initialValue: T) {
  const [value, setValue] = useState<T>(() => {
    const stored = localStorage.getItem(key);
    return stored ? JSON.parse(stored) : initialValue;
  });

  const setStoredValue = (newValue: T) => {
    setValue(newValue);
    localStorage.setItem(key, JSON.stringify(newValue));
  };

  return [value, setStoredValue] as const;
}

// 使用示例
const [theme, setTheme] = useLocalStorage<Theme>('theme', 'light');
```

## 🔍 检查清单

在编写 TypeScript 代码时，【必须】确认：

### 核心要求 [P0]
- [ ] **[P0]** 严格模式：`tsconfig.json` 中是否启用了 `"strict": true`？
- [ ] **[P0]** 类型定义：所有变量、函数参数、返回值是否都有类型定义？
- [ ] **[P0]** interface 优先：是否优先使用 `interface` 定义对象结构？
- [ ] **[P0]** 避免 enum：是否使用联合类型替代 `enum`？
- [ ] **[P0]** 避免 any：是否避免使用 `any`，使用 `unknown` + 类型守卫？
- [ ] **[P0]** 类型守卫：处理未知类型时是否使用了类型守卫？
- [ ] **[P0]** 工具类型：是否合理使用 `Partial`, `Omit`, `Pick` 等工具类型？
- [ ] **[P0]** React 类型：组件 Props 和 Hook 是否有正确的类型定义？

### 推荐实践 [P1]
- [ ] **[P1]** 路径别名：是否配置并使用了路径别名 (`@/*`)？
- [ ] **[P1]** 类型导入：是否使用 `import type` 导入类型？
- [ ] **[P1]** 泛型使用：是否在适当场景使用了泛型？
