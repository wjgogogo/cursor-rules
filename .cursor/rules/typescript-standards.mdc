---
description: 
globs: *.ts,*.tsx
alwaysApply: false
---
# TypeScript 规范

## 类型定义

【必须】遵循：
- 为所有变量、函数参数和返回值定义类型
- **优先使用 `interface` 定义对象结构**
- **禁止使用 `enum`，使用 maps 替代**
- 使用 TypeScript 工具类型（`Partial<T>`, `Pick<T, K>` 等）

```tsx
// ✅ 正确 - interface 优先
interface User {
  id: string;
  name: string;
  email: string;
  role: 'admin' | 'user';
}

interface UserCardProps {
  user: User;
  onEdit?: (user: User) => void;
  className?: string;
}

function UserCard({ user, onEdit, className }: UserCardProps) {
  // 实现
}

// ✅ 正确 - type 用于联合类型
type UserUpdateParams = Partial<Omit<User, 'id'>>;
type Theme = 'light' | 'dark' | 'auto';

function updateUser(id: string, params: UserUpdateParams): Promise<User> {
  // 实现
}

// ❌ 错误 - 对象结构使用 type
type User = {  // 应使用 interface
  id: string;
  name: string;
}

// ❌ 错误 - 未定义类型
function updateUser(id, params) {
  // 未定义类型
}
```

## 导出类型

【必须】遵循：
- 类型文件使用 `.d.ts` 扩展名
- 共享类型放在 `types` 目录
- 组件特定类型与组件同文件

```tsx
// ✅ 正确 - types/api.d.ts
export interface ApiResponse<T> {
  data: T;
  status: number;
  message: string;
}

// ✅ 正确 - 组件中的类型
interface ButtonProps {
  // ...
}

export function Button(props: ButtonProps) {
  // ...
}
```

## 类型安全

【必须】遵循：
- 避免 `any`，使用 `unknown` 替代
- 使用严格 TypeScript 配置
- 为复杂类型提供类型守卫
- 使用泛型提高复用性
