---
description: 
globs: 
alwaysApply: true
---
# 代码质量检查清单

本规范定义了代码质量的要求和检查标准。

## 代码示例可执行性

在文档和注释中的代码示例必须：

1. **语法正确**: 确保所有代码示例都有正确的语法
2. **导入完整**: 包含所有必要的导入语句
3. **类型准确**: TypeScript 代码示例必须类型正确
4. **可独立运行**: 示例代码应该能够在最小环境中运行

```tsx
// ✅ 正确示例 - 完整可运行的代码示例
import { useState, useEffect } from 'react';

interface User {
  id: string;
  name: string;
}

function UserComponent() {
  const [users, setUsers] = useState<User[]>([]);
  
  useEffect(() => {
    // 获取用户数据的逻辑
  }, []);
  
  return <div>{users.length} 个用户</div>;
}

// ❌ 错误示例 - 不完整的代码示例
function UserComponent() {
  const [users, setUsers] = useState([]); // 缺少类型，缺少导入
  return <div>{users.length} 个用户</div>;
}
```

## 拼写和语法检查

1. **中文文档**: 使用正确的中文标点符号和语法
2. **英文代码**: 变量名、函数名、注释使用正确的英文拼写
3. **术语一致性**: 保持技术术语的一致性

## 代码质量要求

编写的代码必须满足：

1. **正确性**: 逻辑正确，无明显错误
2. **时效性**: 使用最新的最佳实践和 API
3. **无 Bug**: 经过基本测试，无明显缺陷
4. **功能完整**: 完全实现所有要求的功能
5. **安全性**: 遵循安全最佳实践
6. **性能**: 考虑性能影响，优化关键路径

## 代码可读性优先

- **可读性优先于性能**: 除非有明确的性能需求，否则优先考虑代码的可读性和可维护性
- **清晰的结构**: 使用清晰的函数分解和模块化
- **有意义的命名**: 使用描述性的变量名和函数名
- **适当的注释**: 为复杂逻辑添加必要的注释

## 完整性要求

1. **无 TODO**: 不留待办事项或占位符
2. **无缺失**: 实现所有要求的功能，不留空白
3. **引用文件名**: 在相关讨论中明确引用具体的文件名
4. **简洁明了**: 减少不必要的冗长说明

## 诚实原则

- **承认不确定**: 如果对某个问题不确定，明确说明而不是猜测
- **说明限制**: 如果无法完成某项任务，诚实说明原因
- **避免偷懒**: 完整实现所有要求的功能，不走捷径

## 代码质量工具

项目使用以下工具确保代码质量：

- **ESLint**: 代码静态分析
- **Prettier**: 代码格式化
- **TypeScript**: 类型检查
- **Husky + lint-staged**: 提交前验证

确保所有代码在提交前通过这些工具的检查。

## 质量检查清单

在提交代码前，请确认：

- [ ] 代码语法正确，无编译错误
- [ ] 所有类型定义完整且正确
- [ ] 遵循项目的命名规范
- [ ] 实现了所有要求的功能
- [ ] 添加了必要的错误处理
- [ ] 清理了所有副作用
- [ ] 通过了所有质量工具检查
- [ ] 代码具有良好的可读性
