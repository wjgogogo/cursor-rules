---
description: 
globs: 
alwaysApply: true
---
# 代码质量规范

## 代码示例要求

【必须】确保：
- 语法正确，包含完整导入
- TypeScript 类型准确
- 可独立运行

```tsx
// ✅ 完整示例
import { useState, useEffect } from 'react';

interface User {
  id: string;
  name: string;
}

function UserComponent() {
  const [users, setUsers] = useState<User[]>([]);
  
  useEffect(() => {
    // 获取用户数据
  }, []);
  
  return <div>{users.length} 个用户</div>;
}

// ❌ 错误示例
function UserComponent() {
  const [users, setUsers] = useState([]); // 缺少类型和导入
  return <div>{users.length} 个用户</div>;
}
```

## 代码质量要求

【必须】满足：
- **正确性**: 逻辑正确，无明显错误
- **时效性**: 使用最新最佳实践
- **功能完整**: 实现所有要求功能
- **安全性**: 遵循安全最佳实践
- **可读性优先**: 优于性能考虑

## 完整性原则

【禁止】：
- 留 TODO 或占位符
- 功能缺失或空白
- 偷懒走捷径

【必须】：
- 引用具体文件名
- 承认不确定性
- 说明任务限制

## 质量工具

【必须】通过：
- ESLint 静态分析
- Prettier 格式化
- TypeScript 类型检查
- Husky + lint-staged 提交验证

## 提交前检查

【必须】确认：
- [ ] 代码语法正确，无编译错误
- [ ] 类型定义完整正确
- [ ] 遵循命名规范
- [ ] 实现所有要求功能
- [ ] 添加必要错误处理
- [ ] 清理所有副作用
- [ ] 通过质量工具检查
- [ ] 代码具有良好可读性
