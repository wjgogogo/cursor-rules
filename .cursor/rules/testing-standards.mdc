---
description:
globs:
alwaysApply: false
---
# 测试规范

## 测试策略

【必须】遵循测试金字塔原则：
- **单元测试（70%）**: 测试独立函数和组件
- **集成测试（20%）**: 测试组件间交互
- **E2E 测试（10%）**: 测试完整用户流程

## 单元测试

【必须】使用 Vitest + Testing Library：

```tsx
// ✅ 正确 - 组件单元测试
import { render, screen, fireEvent } from '@testing-library/react';
import { describe, it, expect, vi } from 'vitest';
import { Button } from './Button';

describe('Button', () => {
  it('应该渲染按钮文本', () => {
    render(<Button>点击我</Button>);
    expect(screen.getByRole('button', { name: '点击我' })).toBeInTheDocument();
  });

  it('应该处理点击事件', () => {
    const handleClick = vi.fn();
    render(<Button onClick={handleClick}>点击我</Button>);
    
    fireEvent.click(screen.getByRole('button'));
    expect(handleClick).toHaveBeenCalledTimes(1);
  });

  it('禁用状态下不应该触发点击', () => {
    const handleClick = vi.fn();
    render(<Button disabled onClick={handleClick}>点击我</Button>);
    
    fireEvent.click(screen.getByRole('button'));
    expect(handleClick).not.toHaveBeenCalled();
  });
});

// ✅ 正确 - Hook 测试
import { renderHook, act } from '@testing-library/react';
import { useCounter } from './useCounter';

describe('useCounter', () => {
  it('应该初始化计数器', () => {
    const { result } = renderHook(() => useCounter(0));
    expect(result.current.count).toBe(0);
  });

  it('应该增加计数', () => {
    const { result } = renderHook(() => useCounter(0));
    
    act(() => {
      result.current.increment();
    });
    
    expect(result.current.count).toBe(1);
  });
});

// ✅ 正确 - 工具函数测试
import { formatCurrency, validateEmail } from './utils';

describe('utils', () => {
  describe('formatCurrency', () => {
    it('应该格式化货币', () => {
      expect(formatCurrency(1234.56)).toBe('¥1,234.56');
      expect(formatCurrency(0)).toBe('¥0.00');
    });
  });

  describe('validateEmail', () => {
    it('应该验证有效邮箱', () => {
      expect(validateEmail('test@example.com')).toBe(true);
      expect(validateEmail('invalid-email')).toBe(false);
    });
  });
});
```

## 集成测试

【必须】测试组件间交互：

```tsx
// ✅ 正确 - 表单集成测试
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { UserForm } from './UserForm';

describe('UserForm 集成测试', () => {
  it('应该提交有效表单', async () => {
    const user = userEvent.setup();
    const onSubmit = vi.fn();
    
    render(<UserForm onSubmit={onSubmit} />);
    
    // 填写表单
    await user.type(screen.getByLabelText('姓名'), '张三');
    await user.type(screen.getByLabelText('邮箱'), 'zhangsan@example.com');
    
    // 提交表单
    await user.click(screen.getByRole('button', { name: '提交' }));
    
    await waitFor(() => {
      expect(onSubmit).toHaveBeenCalledWith({
        name: '张三',
        email: 'zhangsan@example.com',
      });
    });
  });

  it('应该显示验证错误', async () => {
    const user = userEvent.setup();
    render(<UserForm onSubmit={vi.fn()} />);
    
    // 提交空表单
    await user.click(screen.getByRole('button', { name: '提交' }));
    
    await waitFor(() => {
      expect(screen.getByText('姓名是必填项')).toBeInTheDocument();
      expect(screen.getByText('请输入有效邮箱')).toBeInTheDocument();
    });
  });
});

// ✅ 正确 - API 集成测试
import { rest } from 'msw';
import { setupServer } from 'msw/node';
import { UserService } from './UserService';

const server = setupServer(
  rest.get('/api/users', (req, res, ctx) => {
    return res(ctx.json([
      { id: '1', name: '张三', email: 'zhangsan@example.com' }
    ]));
  }),
  
  rest.post('/api/users', (req, res, ctx) => {
    return res(ctx.json({ id: '2', ...req.body }));
  })
);

beforeAll(() => server.listen());
afterEach(() => server.resetHandlers());
afterAll(() => server.close());

describe('UserService', () => {
  it('应该获取用户列表', async () => {
    const users = await UserService.getUsers();
    expect(users).toHaveLength(1);
    expect(users[0].name).toBe('张三');
  });

  it('应该创建新用户', async () => {
    const newUser = { name: '李四', email: 'lisi@example.com' };
    const createdUser = await UserService.createUser(newUser);
    
    expect(createdUser.id).toBe('2');
    expect(createdUser.name).toBe('李四');
  });
});
```

## E2E 测试

【必须】使用 Playwright 测试用户流程：

```typescript
// ✅ 正确 - E2E 测试
import { test, expect } from '@playwright/test';

test.describe('用户认证流程', () => {
  test('用户应该能够登录和登出', async ({ page }) => {
    // 访问登录页面
    await page.goto('/login');
    
    // 填写登录表单
    await page.fill('[data-testid="email"]', 'test@example.com');
    await page.fill('[data-testid="password"]', 'password123');
    await page.click('[data-testid="login-button"]');
    
    // 验证登录成功
    await expect(page).toHaveURL('/dashboard');
    await expect(page.locator('[data-testid="user-menu"]')).toBeVisible();
    
    // 登出
    await page.click('[data-testid="user-menu"]');
    await page.click('[data-testid="logout-button"]');
    
    // 验证登出成功
    await expect(page).toHaveURL('/login');
  });

  test('应该显示登录错误', async ({ page }) => {
    await page.goto('/login');
    
    await page.fill('[data-testid="email"]', 'invalid@example.com');
    await page.fill('[data-testid="password"]', 'wrongpassword');
    await page.click('[data-testid="login-button"]');
    
    await expect(page.locator('[data-testid="error-message"]')).toContainText('登录失败');
  });
});

test.describe('用户管理', () => {
  test.beforeEach(async ({ page }) => {
    // 登录前置条件
    await page.goto('/login');
    await page.fill('[data-testid="email"]', 'admin@example.com');
    await page.fill('[data-testid="password"]', 'admin123');
    await page.click('[data-testid="login-button"]');
    await expect(page).toHaveURL('/dashboard');
  });

  test('应该能够创建新用户', async ({ page }) => {
    await page.goto('/users');
    await page.click('[data-testid="add-user-button"]');
    
    await page.fill('[data-testid="user-name"]', '新用户');
    await page.fill('[data-testid="user-email"]', 'newuser@example.com');
    await page.click('[data-testid="save-button"]');
    
    await expect(page.locator('[data-testid="success-message"]')).toContainText('用户创建成功');
    await expect(page.locator('text=新用户')).toBeVisible();
  });
});
```

## 测试配置

【必须】配置测试环境：

```typescript
// vitest.config.ts
import { defineConfig } from 'vitest/config';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  test: {
    environment: 'jsdom',
    setupFiles: ['./src/test/setup.ts'],
    globals: true,
    coverage: {
      provider: 'c8',
      reporter: ['text', 'json', 'html'],
      exclude: [
        'node_modules/',
        'src/test/',
        '**/*.d.ts',
        '**/*.config.*',
        '**/coverage/**',
      ],
      thresholds: {
        global: {
          branches: 80,
          functions: 80,
          lines: 80,
          statements: 80,
        },
      },
    },
  },
});
```

```typescript
// src/test/setup.ts
import '@testing-library/jest-dom';
import { cleanup } from '@testing-library/react';
import { afterEach, vi } from 'vitest';

// 每个测试后清理
afterEach(() => {
  cleanup();
});

// Mock 全局对象
Object.defineProperty(window, 'matchMedia', {
  writable: true,
  value: vi.fn().mockImplementation(query => ({
    matches: false,
    media: query,
    onchange: null,
    addListener: vi.fn(),
    removeListener: vi.fn(),
    addEventListener: vi.fn(),
    removeEventListener: vi.fn(),
    dispatchEvent: vi.fn(),
  })),
});

// Mock IntersectionObserver
global.IntersectionObserver = vi.fn().mockImplementation(() => ({
  observe: vi.fn(),
  unobserve: vi.fn(),
  disconnect: vi.fn(),
}));
```

```typescript
// playwright.config.ts
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  testDir: './e2e',
  fullyParallel: true,
  forbidOnly: !!process.env.CI,
  retries: process.env.CI ? 2 : 0,
  workers: process.env.CI ? 1 : undefined,
  reporter: 'html',
  use: {
    baseURL: 'http://localhost:3000',
    trace: 'on-first-retry',
    screenshot: 'only-on-failure',
  },
  projects: [
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
    },
    {
      name: 'firefox',
      use: { ...devices['Desktop Firefox'] },
    },
    {
      name: 'webkit',
      use: { ...devices['Desktop Safari'] },
    },
    {
      name: 'Mobile Chrome',
      use: { ...devices['Pixel 5'] },
    },
  ],
  webServer: {
    command: 'npm run dev',
    url: 'http://localhost:3000',
    reuseExistingServer: !process.env.CI,
  },
});
```

## 测试数据管理

【必须】使用测试工厂和 Fixtures：

```typescript
// ✅ 正确 - 测试工厂
import { faker } from '@faker-js/faker';

export const UserFactory = {
  build: (overrides: Partial<User> = {}): User => ({
    id: faker.string.uuid(),
    name: faker.person.fullName(),
    email: faker.internet.email(),
    createdAt: faker.date.recent(),
    ...overrides,
  }),

  buildList: (count: number, overrides: Partial<User> = {}): User[] =>
    Array.from({ length: count }, () => UserFactory.build(overrides)),
};

// 使用示例
describe('UserList', () => {
  it('应该显示用户列表', () => {
    const users = UserFactory.buildList(3);
    render(<UserList users={users} />);
    
    users.forEach(user => {
      expect(screen.getByText(user.name)).toBeInTheDocument();
    });
  });
});

// ✅ 正确 - 测试 Fixtures
// e2e/fixtures/users.json
{
  "testUser": {
    "email": "test@example.com",
    "password": "password123",
    "name": "测试用户"
  },
  "adminUser": {
    "email": "admin@example.com",
    "password": "admin123",
    "name": "管理员"
  }
}

// 在 E2E 测试中使用
import users from '../fixtures/users.json';

test('管理员登录', async ({ page }) => {
  const { adminUser } = users;
  await page.goto('/login');
  await page.fill('[data-testid="email"]', adminUser.email);
  await page.fill('[data-testid="password"]', adminUser.password);
  await page.click('[data-testid="login-button"]');
});
```

## Mock 和 Stub

【必须】正确使用 Mock：

```typescript
// ✅ 正确 - API Mock
import { vi } from 'vitest';

// Mock 整个模块
vi.mock('./api/userService', () => ({
  UserService: {
    getUsers: vi.fn(),
    createUser: vi.fn(),
    updateUser: vi.fn(),
    deleteUser: vi.fn(),
  },
}));

// Mock 特定函数
const mockFetch = vi.fn();
global.fetch = mockFetch;

describe('API 调用', () => {
  beforeEach(() => {
    mockFetch.mockClear();
  });

  it('应该调用正确的 API', async () => {
    mockFetch.mockResolvedValueOnce({
      ok: true,
      json: async () => ({ id: '1', name: '张三' }),
    });

    const user = await fetchUser('1');
    
    expect(mockFetch).toHaveBeenCalledWith('/api/users/1');
    expect(user.name).toBe('张三');
  });
});

// ✅ 正确 - 时间 Mock
import { vi } from 'vitest';

describe('时间相关测试', () => {
  beforeEach(() => {
    vi.useFakeTimers();
  });

  afterEach(() => {
    vi.useRealTimers();
  });

  it('应该在延迟后执行', () => {
    const callback = vi.fn();
    setTimeout(callback, 1000);
    
    expect(callback).not.toHaveBeenCalled();
    
    vi.advanceTimersByTime(1000);
    expect(callback).toHaveBeenCalled();
  });
});
```

## 测试覆盖率要求

【必须】达到以下覆盖率：
- **语句覆盖率**: ≥ 80%
- **分支覆盖率**: ≥ 80%
- **函数覆盖率**: ≥ 80%
- **行覆盖率**: ≥ 80%

```json
// package.json 脚本
{
  "scripts": {
    "test": "vitest",
    "test:coverage": "vitest --coverage",
    "test:ui": "vitest --ui",
    "test:e2e": "playwright test",
    "test:e2e:ui": "playwright test --ui"
  }
}
```

## 测试最佳实践

【必须】遵循：

### 1. 测试命名
```typescript
// ✅ 正确 - 描述性测试名称
describe('UserForm', () => {
  it('应该在提交有效数据时调用 onSubmit', () => {});
  it('应该在姓名为空时显示错误信息', () => {});
  it('应该在邮箱格式无效时显示错误信息', () => {});
});

// ❌ 错误 - 模糊的测试名称
describe('UserForm', () => {
  it('测试提交', () => {});
  it('测试验证', () => {});
});
```

### 2. 测试隔离
```typescript
// ✅ 正确 - 每个测试独立
describe('Counter', () => {
  let counter: Counter;

  beforeEach(() => {
    counter = new Counter(0); // 每个测试都有新实例
  });

  it('应该增加计数', () => {
    counter.increment();
    expect(counter.value).toBe(1);
  });

  it('应该减少计数', () => {
    counter.decrement();
    expect(counter.value).toBe(-1);
  });
});
```

### 3. 测试数据
```typescript
// ✅ 正确 - 使用有意义的测试数据
const validUser = {
  name: '张三',
  email: 'zhangsan@example.com',
  age: 25,
};

const invalidUser = {
  name: '',
  email: 'invalid-email',
  age: -1,
};

// ❌ 错误 - 使用无意义的数据
const user = {
  name: 'test',
  email: 'test@test.com',
  age: 1,
};
```

## 持续集成中的测试

【必须】在 CI 中运行所有测试：

```yaml
# .github/workflows/test.yml
name: Tests
on: [push, pull_request]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'
      - run: pnpm install
      - run: pnpm run test:coverage
      - uses: codecov/codecov-action@v3
        with:
          file: ./coverage/coverage-final.json

  e2e-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'
      - run: pnpm install
      - run: pnpm run build
      - run: npx playwright install --with-deps
      - run: pnpm run test:e2e
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
```

## 测试检查清单

【必须】在提交前确认：

- [ ] **单元测试**：所有新功能都有对应的单元测试
- [ ] **集成测试**：关键用户流程有集成测试覆盖
- [ ] **E2E 测试**：主要业务流程有 E2E 测试
- [ ] **覆盖率**：达到最低覆盖率要求
- [ ] **测试通过**：所有测试都能通过
- [ ] **Mock 清理**：正确清理 Mock 和 Stub
- [ ] **测试隔离**：测试之间相互独立
- [ ] **测试数据**：使用有意义的测试数据
- [ ] **错误场景**：覆盖错误和边界情况
- [ ] **性能测试**：关键功能有性能测试
