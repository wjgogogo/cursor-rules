---
description: Git 提交消息规范
globs: 
alwaysApply: false
---
# Git 提交消息规范

为保持代码库的整洁和一致性，请遵循以下 Git 提交消息规范。

## 提交消息格式

```
<类型>: <简短描述>

[可选的详细描述]

[可选的关联问题]
```

## 类型标识

- **feat**: 新功能或特性
- **fix**: 修复 bug
- **docs**: 仅修改文档
- **style**: 不影响代码功能的格式修改（空格、格式化、缺少分号等）
- **refactor**: 既不修复 bug 也不添加新功能的代码重构
- **perf**: 性能优化
- **test**: 添加或修改测试
- **chore**: 构建过程或辅助工具的变动
- **ci**: 持续集成相关的改动

## 描述规范

- 使用中文描述改动内容
- 保持简洁，不超过 50 个字符
- 不要以句号结尾
- 使用动词开头，使用第一人称现在时，例如："添加"而不是"添加了"

## 示例

```
feat: 添加用户认证功能

实现了基于 JWT 的用户认证系统，包括登录、注册和令牌刷新功能。

close #123
```

```
fix: 修复流式响应中断问题

修复了在大量并发请求下流式响应可能中断的问题。

close #456
```

## 分支管理

- **main**: 主分支，保持随时可发布状态
- **feat/<功能名>**: 新功能开发分支
- **fix/<问题描述>**: 修复问题分支

## 提交前检查

在提交代码前，请确保：

- [ ] 代码已通过所有测试
- [ ] 提交消息符合上述规范
- [ ] 只包含与当前功能或修复相关的更改
