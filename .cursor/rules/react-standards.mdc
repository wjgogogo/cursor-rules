---
description: 
globs: *.js,*.jsx,*.ts,*.tsx
alwaysApply: false
---
# React 开发规范

## 组件定义

【必须】遵循：
- 使用函数组件 + Hooks，避免类组件
- TypeScript 定义 Props 和 State 类型
- 命名导出，避免默认导出

```tsx
// ✅ 正确
import { useState } from 'react';

interface ButtonProps {
  label: string;
  onClick: () => void;
  variant?: 'primary' | 'secondary';
}

export function Button({ label, onClick, variant = 'primary' }: ButtonProps) {
  const [isHovered, setIsHovered] = useState(false);
  
  return (
    <button 
      className={`btn btn-${variant} ${isHovered ? 'hovered' : ''}`}
      onClick={onClick}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      {label}
    </button>
  );
}

// ❌ 错误
export default function Button(props) {
  // 未定义类型，使用默认导出
}
```

## Hooks 使用

【必须】遵循：
- 自定义 Hooks 以 `use` 开头
- 不在条件语句中使用 Hooks
- 复杂逻辑封装为自定义 Hooks

```tsx
// ✅ 正确
function useWindowSize() {
  const [size, setSize] = useState({ width: 0, height: 0 });
  
  useEffect(() => {
    function handleResize() {
      setSize({ width: window.innerWidth, height: window.innerHeight });
    }
    
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);
  
  return size;
}

// ❌ 错误
function getWindowSize() { // 不以 use 开头
  const [size, setSize] = useState({ width: 0, height: 0 });
}
```

## 编程模式

【必须】使用：
- 函数式和声明式编程
- 描述性变量名（`isLoading`, `hasError`）
- 迭代和模块化，避免重复

```tsx
// ✅ 正确 - 函数式编程
const processUsers = (users: User[]) => 
  users
    .filter(user => user.isActive)
    .map(user => ({ ...user, fullName: `${user.firstName} ${user.lastName}` }))
    .sort((a, b) => a.fullName.localeCompare(b.fullName));

// ✅ 正确 - 描述性命名
const isLoading = false;
const hasError = false;
const shouldShowModal = true;

// ❌ 错误 - 命令式编程
function processUsers(users) {
  let result = [];
  for (let i = 0; i < users.length; i++) {
    if (users[i].isActive) {
      users[i].fullName = users[i].firstName + ' ' + users[i].lastName;
      result.push(users[i]);
    }
  }
  return result;
}
```
