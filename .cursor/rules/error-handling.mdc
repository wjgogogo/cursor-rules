---
description: 
globs: 
alwaysApply: true
---
# 错误处理规范

## 核心原则 [P0]

【必须】建立统一的错误处理策略：
- 分层错误处理：组件级 → 页面级 → 应用级
- 用户友好的错误提示
- 完整的错误日志记录
- 优雅的错误恢复机制

## 错误类型定义 [P0]

【必须】使用统一的错误类型：

```tsx
interface AppError {
  type: 'validation' | 'network' | 'business' | 'system';
  code: string;
  message: string;
  timestamp: string;
}

// 快速创建错误
const createError = (type: AppError['type'], code: string, message: string): AppError => ({
  type,
  code,
  message,
  timestamp: new Date().toISOString(),
});
```

## API 错误处理 [P0]

【必须】统一处理 API 错误：

```tsx
async function apiRequest<T>(url: string, options?: RequestInit): Promise<T> {
  try {
    const response = await fetch(url, options);
    
    if (!response.ok) {
      throw createError('network', `HTTP_${response.status}`, `请求失败: ${response.statusText}`);
    }
    
    return response.json();
  } catch (error) {
    if (error instanceof TypeError) {
      throw createError('network', 'NETWORK_ERROR', '网络连接失败');
    }
    throw error;
  }
}
```

## 全局错误处理 [P1]

【必须】设置全局错误处理器：

```tsx
// 在应用根组件中设置
function setupGlobalErrorHandlers() {
  // 未捕获的 Promise 错误
  window.addEventListener('unhandledrejection', (event) => {
    console.error('未处理的 Promise 错误:', event.reason);
    // 上报错误到监控系统
  });

  // 未捕获的 JavaScript 错误
  window.addEventListener('error', (event) => {
    console.error('JavaScript 错误:', event.error);
    // 上报错误到监控系统
  });
}
```

## 错误日志记录 [P1]

【必须】记录错误详情：

```tsx
function logError(error: AppError, context?: Record<string, any>) {
  const logData = {
    ...error,
    context,
    url: window.location.href,
    userAgent: navigator.userAgent,
  };

  // 开发环境：控制台输出
  if (process.env.NODE_ENV === 'development') {
    console.error('Error:', logData);
  }

  // 生产环境：发送到监控服务
  if (process.env.NODE_ENV === 'production') {
    // 发送到 Sentry、LogRocket 等服务
  }
}
```

## 重试机制 [P2]

【推荐】为网络请求添加重试：

```tsx
async function withRetry<T>(
  operation: () => Promise<T>,
  maxRetries: number = 3
): Promise<T> {
  for (let i = 0; i <= maxRetries; i++) {
    try {
      return await operation();
    } catch (error) {
      if (i === maxRetries) throw error;
      await new Promise(resolve => setTimeout(resolve, 1000 * i));
    }
  }
  throw new Error('重试次数已用完');
}
```

## 🔍 检查清单

### 核心要求 [P0]
- [ ] **[P0]** 错误类型定义：是否使用了项目中统一的 `AppError` 类型（或等效自定义错误类型）来标准化错误信息？
- [ ] **[P0]** API 错误处理：所有 `fetch` 或其他 API 请求是否都按照规范统一处理了网络错误和 HTTP 状态码错误？
- [ ] **[P0]** 关键功能错误捕获：项目中的关键业务逻辑和核心功能是否都包含了 try-catch 或其他错误捕获机制？
- [ ] **[P0]** 用户友好提示：当发生用户可感知的错误时，是否向用户展示了清晰、友好且不暴露敏感信息的提示？
- [ ] **[P0]** 组件错误边界：React 组件树中是否在适当层级（如页面级、重要功能模块级）设置了错误边界（Error Boundaries）以防止整个应用崩溃？

### 质量提升 [P1]
- [ ] **[P1]** 全局错误处理：是否配置了全局错误处理器（如 `window.addEventListener('error')` 和 `unhandledrejection`）来捕获未处理的 JavaScript 错误和 Promise rejections？
- [ ] **[P1]** 错误日志记录：是否已实现错误日志记录机制，在开发环境输出到控制台，在生产环境上报到监控服务（如 Sentry）？日志是否包含足够的上下文信息（错误类型、代码、消息、时间戳、URL、用户代理等）？

### 可选优化 [P2]
- [ ] **[P2]** 网络请求重试：对于临时的网络问题或可重试的服务端错误，是否为关键的网络请求实现了合理的重试机制？
- [ ] **[P2]** 优雅降级：在某些非核心功能发生错误时，应用是否能够优雅降级，保证核心功能仍然可用？
