---
description: 
globs: 
alwaysApply: true
---
# 技术栈选型规范

## 核心技术栈

【必须】使用现代稳定技术：
- **框架**: React 18+ + TypeScript 5+
- **样式**: Tailwind CSS + shadcn/ui
- **状态管理**: Zustand（推荐）/ React Context
- **路由**: React Router 6+
- **构建**: Vite 5+
- **运行时**: Node.js 18+ LTS

## 状态管理选择

【必须】根据项目规模选择：

```tsx
// ✅ 小型项目 - React Context
const AppContext = createContext<AppState | null>(null);

function useAppState() {
  const context = useContext(AppContext);
  if (!context) {
    throw new Error('useAppState must be used within AppProvider');
  }
  return context;
}

// ✅ 中大型项目 - Zustand
import { create } from 'zustand';

interface AppState {
  user: User | null;
  theme: 'light' | 'dark';
  setUser: (user: User | null) => void;
  setTheme: (theme: 'light' | 'dark') => void;
}

const useAppStore = create<AppState>((set) => ({
  user: null,
  theme: 'light',
  setUser: (user) => set({ user }),
  setTheme: (theme) => set({ theme }),
}));
```

## UI 组件库

【必须】使用 shadcn/ui + Tailwind：

```tsx
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";

// ✅ 正确 - UI 组件使用
function UserForm({ onSubmit }: { onSubmit: (data: UserData) => void }) {
  return (
    <Card className="w-full max-w-md mx-auto">
      <CardHeader>
        <CardTitle>用户信息</CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <Input 
          placeholder="用户名" 
          className="w-full"
        />
        <Input 
          type="email" 
          placeholder="邮箱" 
          className="w-full"
        />
        <Button 
          onClick={() => onSubmit(formData)} 
          className="w-full"
        >
          保存
        </Button>
      </CardContent>
    </Card>
  );
}
```

## 表单和验证

【必须】使用 React Hook Form + Zod：

```tsx
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';

// ✅ 正确 - 表单验证
const userSchema = z.object({
  name: z.string().min(1, '姓名不能为空'),
  email: z.string().email('邮箱格式不正确'),
  age: z.number().min(18, '年龄必须大于18岁'),
});

type UserFormData = z.infer<typeof userSchema>;

function UserForm() {
  const form = useForm<UserFormData>({
    resolver: zodResolver(userSchema),
    defaultValues: {
      name: '',
      email: '',
      age: 18,
    },
  });

  const onSubmit = (data: UserFormData) => {
    console.log('Valid data:', data);
  };

  return (
    <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
      <Input
        {...form.register('name')}
        placeholder="姓名"
        className={form.formState.errors.name ? 'border-red-500' : ''}
      />
      {form.formState.errors.name && (
        <p className="text-red-500 text-sm">{form.formState.errors.name.message}</p>
      )}
      
      <Input
        {...form.register('email')}
        type="email"
        placeholder="邮箱"
        className={form.formState.errors.email ? 'border-red-500' : ''}
      />
      {form.formState.errors.email && (
        <p className="text-red-500 text-sm">{form.formState.errors.email.message}</p>
      )}
      
      <Button type="submit" disabled={form.formState.isSubmitting}>
        {form.formState.isSubmitting ? '提交中...' : '提交'}
      </Button>
    </form>
  );
}
```

## 测试配置

【推荐】基础测试设置：

```tsx
// ✅ 组件测试示例
import { render, screen, fireEvent } from '@testing-library/react';
import { describe, it, expect, vi } from 'vitest';
import { Button } from '@/components/ui/button';

describe('Button Component', () => {
  it('renders correctly', () => {
    render(<Button>Click me</Button>);
    expect(screen.getByRole('button')).toHaveTextContent('Click me');
  });

  it('calls onClick when clicked', () => {
    const handleClick = vi.fn();
    render(<Button onClick={handleClick}>Click me</Button>);
    
    fireEvent.click(screen.getByRole('button'));
    expect(handleClick).toHaveBeenCalledTimes(1);
  });
});
```

## 路由管理

【必须】使用 React Router：

```tsx
import { createBrowserRouter, RouterProvider, Outlet } from 'react-router-dom';

// ✅ 正确 - 路由配置
const router = createBrowserRouter([
  {
    path: '/',
    element: <Layout />,
    children: [
      {
        index: true,
        element: <HomePage />,
      },
      {
        path: 'users',
        element: <UsersPage />,
      },
      {
        path: 'users/:id',
        element: <UserDetailPage />,
      },
    ],
  },
  {
    path: '/login',
    element: <LoginPage />,
  },
]);

function App() {
  return <RouterProvider router={router} />;
}

function Layout() {
  return (
    <div>
      <nav>{/* 导航栏 */}</nav>
      <main>
        <Outlet />
      </main>
    </div>
  );
}
```

## 环境配置

【必须】正确配置环境：

```bash
# .env.local
VITE_API_URL=http://localhost:3001/api
VITE_APP_NAME=My App

# .env.production
VITE_API_URL=https://api.myapp.com
VITE_APP_NAME=My App
```

```tsx
// ✅ 正确 - 环境变量使用
const config = {
  apiUrl: import.meta.env.VITE_API_URL,
  appName: import.meta.env.VITE_APP_NAME,
  isDev: import.meta.env.DEV,
  isProd: import.meta.env.PROD,
};

export default config;
```

## 选型原则

【必须】优先考虑：
1. **稳定性**：选择成熟稳定的技术
2. **生态系统**：有活跃社区和完善文档
3. **团队熟悉度**：团队能够快速上手
4. **维护成本**：长期维护和升级的复杂度

## 🔍 检查清单

在项目启动、技术选型决策或重要升级时，【必须】对照检查以下技术栈要素是否符合规范：

### 核心技术栈 [P0]
- [ ] **[P0]** 框架与语言：项目是否基于 `React 18+` 和 `TypeScript 5+` 构建？
- [ ] **[P0]** 构建工具：是否使用 `Vite 5+` 作为项目构建工具？
- [ ] **[P0]** 运行时环境：后端或开发环境是否依赖 `Node.js 18+ LTS` 版本？

### UI 与样式 [P0]
- [ ] **[P0]** UI 组件库：是否以 `shadcn/ui` 作为基础 UI 组件库？
- [ ] **[P0]** 样式方案：是否主要使用 `Tailwind CSS` 进行样式开发，并遵循 `styling-standards.mdc`？

### 状态管理 [P0]
- [ ] **[P0]** 状态管理方案：是否根据项目规模和复杂度，合理选择了状态管理方案（如 Zustand 推荐用于中大型项目，React Context 可用于小型或局部状态）？

### 表单与数据校验 [P0]
- [ ] **[P0]** 表单处理：是否使用 `React Hook Form` 进行表单状态管理和提交处理？
- [ ] **[P0]** 数据校验：是否使用 `Zod` 定义数据结构和校验规则，并与 React Hook Form 集成 (`zodResolver`)？

### 路由管理 [P0]
- [ ] **[P0]** 路由方案：前端路由是否使用 `React Router 6+` 实现？

### 数据获取与缓存 [P1]
- [ ] **[P1]** 服务器状态管理（推荐）：对于与后端 API 的数据交互和缓存，是否考虑或使用了 `TanStack Query (React Query)`？

### 测试与代码质量 [P1]
- [ ] **[P1]** 测试框架（推荐）：是否配置了 `Vitest` 作为测试运行器和 `React Testing Library` 用于组件测试？（详细参考 `testing-standards.mdc`）
- [ ] **[P1]** 代码规范工具：项目中是否已配置并启用了 `ESLint` 和 `Prettier` 以保证代码质量和风格一致性？

### 环境配置 [P0]
- [ ] **[P0]** 环境变量：项目是否使用了 `.env` 文件 (如 `.env.local`, `.env.production`) 来管理不同环境的配置（如 API 地址、应用名称），并通过 `import.meta.env` (Vite) 正确访问？
