---
description: 
globs: 
alwaysApply: false
---
# 核心规则索引

## 🎯 优先级说明

- **[P0]** 项目必须遵循，影响基础功能
- **[P1]** 强烈推荐，影响代码质量  
- **[P2]** 可选优化，影响开发效率

## 📋 P0 核心规则摘要

### 技术栈基础 [P0]
- **框架**: React 18+ + TypeScript 5+
- **样式**: Tailwind CSS + shadcn/ui
- **构建**: Vite 5+
- **包管理**: 优先 pnpm，锁定版本

### 代码质量 [P0]
- **类型安全**: 所有变量、函数必须定义类型
- **导出方式**: 优先命名导出，避免默认导出
- **命名规范**: 文件用 kebab-case，变量用 camelCase
- **错误处理**: 所有 API 调用必须有错误处理

### 安全基础 [P0]
- **输入验证**: 使用 Zod 验证所有用户输入
- **XSS 防护**: 避免 dangerouslySetInnerHTML，使用 DOMPurify
- **敏感数据**: 禁止在客户端存储敏感信息

## 🔍 检查清单：新项目快速上手

所有新项目启动和开发过程中，【必须】遵循以下 P0 级核心要求：

### 启动时必须确认
- [ ] **[P0]** TypeScript 严格模式：项目 `tsconfig.json` 中 `strict` 是否已配置为 `true`？
- [ ] **[P0]** 代码质量工具：ESLint 和 Prettier 是否已正确配置并集成到项目中？
- [ ] **[P0]** 版本控制规范：Git commit 规范（如 Conventional Commits）是否已建立并传达给团队？
- [ ] **[P0]** 应用级错误边界：是否已在应用顶层或关键布局处实现错误边界组件，以防止白屏？
- [ ] **[P0]** 基础安全措施：是否已部署基础的安全措施（如输入验证框架、XSS 防护策略）？

### 开发时必须遵循
- [ ] **[P0]** 组件类型定义：每个 React 组件的 Props 和 State 是否都有明确的 TypeScript 类型定义？
- [ ] **[P0]** API 错误处理：所有与后端或第三方服务的 API 调用是否都包含恰当的错误处理逻辑？
- [ ] **[P0]** 输入数据验证：所有接收外部输入的场景（如表单、URL参数）是否都进行了严格验证？
- [ ] **[P0]** 模块导出方式：组件和模块是否优先使用命名导出（named exports）？
- [ ] **[P0]** Git 提交消息：每次代码提交是否都遵循了项目的 Git commit 消息规范？

## 📚 详细规范索引

### 核心开发规范
| 领域 | 文件 | 核心内容 |
|------|------|----------|
| **TypeScript** | `typescript-standards.mdc` | 类型定义、泛型使用、严格模式 |
| **React** | `react-standards.mdc` | 组件规范、Hooks 使用、性能优化 |
| **项目配置** | `project-setup.mdc` | 完整配置示例、目录结构、环境变量 |
| **代码质量** | `code-quality-tools.mdc` | ESLint、Prettier、VS Code 配置 |
| **命名规范** | `naming-conventions.mdc` | 文件、变量、组件命名标准 |

### 工程化与流程
| 领域 | 文件 | 核心内容 |
|------|------|----------|
| **样式系统** | `styling-standards.mdc` | Tailwind、响应式设计、主题 |
| **错误处理** | `error-handling.mdc` | 统一错误处理策略、边界处理 |
| **性能优化** | `performance-optimization.mdc` | 优化技术和监控指标 |
| **API 设计** | `api-design.mdc` | RESTful 设计原则、响应格式 |
| **测试规范** | `testing-standards.mdc` | 测试策略和配置方法 |
| **安全标准** | `security-standards.mdc` | 输入验证、XSS 防护、认证 |

### 协作与管理
| 领域 | 文件 | 核心内容 |
|------|------|----------|
| **包管理** | `install-package.mdc` | npm 包安装、Monorepo 管理 |
| **模块导出** | `module-exports.mdc` | 导出方式、依赖管理 |
| **Git 规范** | `git-commit-message.mdc` | 提交消息格式、分支管理 |
| **文档规范** | `docs-guide.mdc` | Markdown 格式、中英文排版 |
| **LLM 协作** | `llm.mdc` | RIPER-5 模式、AI 协作流程 |
| **Context7 集成** | `context7.mdc` | 第三方库文档获取规范 |

### 快速参考
| 类型 | 文件 | 用途 |
|------|------|------|
| **核心索引** | `core.mdc` | 本文件，规范导航和概览 |
