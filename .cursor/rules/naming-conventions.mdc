---
description: 
globs: 
alwaysApply: true
---
# 命名规范

## 核心原则

【必须】遵循：名称清晰表达意图，避免歧义，保持一致风格

## 文件命名

【必须】使用 `kebab-case`：
- 目录：`components/user-profile/`
- 组件：`user-card.tsx`
- Hooks：`use-auth.ts`
- 工具：`api-client.ts`
- 类型：`api-types.d.ts`
- 测试：`user-card.test.tsx`

## 变量命名规范

| 类型 | 风格 | 示例 |
|------|------|------|
| 变量、函数 | `camelCase` | `userName`, `fetchData()` |
| 类、组件 | `PascalCase` | `UserCard`, `DataService` |
| 常量 | `UPPER_SNAKE_CASE` | `API_BASE_URL` |
| 接口、类型 | `PascalCase` | `UserData`, `ButtonVariant` |

## 布尔值命名

【必须】使用明确前缀：

```tsx
// ✅ 正确
const isLoading = false;
const hasPermission = true;
const shouldShowModal = false;
const canEdit = true;

// ❌ 错误
const loading = false;
const permission = true;
const visible = false;
```

## 函数命名

【必须】动词开头，描述行为：

```tsx
// ✅ 正确 - CRUD 操作
function fetchUserProfile(userId: string): Promise<UserProfile> {}
function createNewPost(postData: PostData): Promise<Post> {}
function updateUserSettings(settings: UserSettings): Promise<void> {}
function deleteComment(commentId: string): Promise<void> {}

// ✅ 正确 - 事件处理
function handleSubmitForm(event: FormEvent): void {}
function handleUserClick(userId: string): void {}

// ❌ 错误
function userData() {} // 应使用 fetchUserData
function submit() {}   // 应使用 handleSubmit
```

## 组件和 Props

【必须】直观反映用途：

```tsx
// ✅ 正确
interface UserProfileCardProps {
  user: User;
  isEditable?: boolean;
  onEdit?: (user: User) => void;
  className?: string;
}

function UserProfileCard({ user, isEditable, onEdit }: UserProfileCardProps) {
  // 实现
}
```

## Hooks 命名

【必须】以 `use` 开头：

```tsx
// ✅ 正确
function useLocalStorage<T>(key: string, initialValue: T) {}
function useDebounce<T>(value: T, delay: number) {}
function useUserProfile(userId: string) {}

// ❌ 错误
function localStorage() {}  // 缺少 use 前缀
function getWindowSize() {} // Hook 必须以 use 开头
```

## API 和服务

【必须】清晰描述功能：

```tsx
// ✅ 正确
class UserApiClient {
  async fetchUserProfile(userId: string): Promise<UserProfile> {}
  async updateUserProfile(userId: string, data: Partial<UserProfile>): Promise<void> {}
}

const API_ENDPOINTS = {
  USERS: '/api/users',
  AUTH_LOGIN: '/api/auth/login',
} as const;
```

## 避免的模式

【禁止】使用：

```tsx
// ❌ 缩写和简写
const usr = getCurrentUser();     // 应使用 user
const btn = document.querySelector(); // 应使用 button

// ❌ 无意义数字后缀
const data1 = fetchUsers();       // 应使用具体名称
const data2 = fetchPosts();

// ❌ 类型信息在变量名中
const userArray = [user1, user2]; // 应使用 users
const isLoadingBoolean = false;   // 应使用 isLoading
```

## 一致性约定

【必须】保持团队一致：

```tsx
// 布尔状态统一前缀
const isLoading = false;
const hasPermission = true;
const canEdit = false;
const shouldShowTip = true;

// 事件处理统一前缀
const handleClick = () => {};
const handleSubmit = () => {};
const handleInputChange = () => {};

// API 操作统一动词
const fetchUsers = async () => {};
const createUser = async () => {};
const updateUser = async () => {};
const deleteUser = async () => {};
```
