---
description: 
globs: *.js,*.jsx,*.ts,*.tsx
alwaysApply: false
---
# 性能优化规范

## 核心指标监控 [P1]

【必须】监控 Web Vitals 核心指标：

```tsx
import { getCLS, getFID, getLCP } from 'web-vitals';

// ✅ 基础性能监控
function sendToAnalytics(metric: any) {
  fetch('/api/performance', {
    method: 'POST',
    body: JSON.stringify({
      name: metric.name,
      value: metric.value,
      url: window.location.href,
    }),
  });
}

// 监控核心指标
getCLS(sendToAnalytics);  // 累积布局偏移 < 0.1
getFID(sendToAnalytics);  // 首次输入延迟 < 100ms
getLCP(sendToAnalytics);  // 最大内容绘制 < 2.5s
```

## 图片优化

【必须】优化图片加载：

```tsx
// ✅ 正确 - 图片懒加载
function LazyImage({ src, alt, ...props }: ImageProps) {
  const [isLoaded, setIsLoaded] = useState(false);
  const imgRef = useRef<HTMLImageElement>(null);

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsLoaded(true);
          observer.disconnect();
        }
      },
      { threshold: 0.1 }
    );

    if (imgRef.current) {
      observer.observe(imgRef.current);
    }

    return () => observer.disconnect();
  }, []);

  return (
    <img
      ref={imgRef}
      src={isLoaded ? src : undefined}
      alt={alt}
      loading="lazy"
      {...props}
    />
  );
}

// ✅ 正确 - 响应式图片格式
function ResponsiveImage({ src, alt }: { src: string; alt: string }) {
  return (
    <picture>
      <source srcSet={`${src}.webp`} type="image/webp" />
      <img src={`${src}.jpg`} alt={alt} loading="lazy" />
    </picture>
  );
}
```

## 代码分割

【必须】按需加载组件：

```tsx
import { lazy, Suspense } from 'react';

// ✅ 正确 - 路由级分割
const Dashboard = lazy(() => import('./pages/Dashboard'));
const Profile = lazy(() => import('./pages/Profile'));
const Settings = lazy(() => import('./pages/Settings'));

function App() {
  return (
    <Suspense fallback={<div>加载中...</div>}>
      <Routes>
        <Route path="/dashboard" element={<Dashboard />} />
        <Route path="/profile" element={<Profile />} />
        <Route path="/settings" element={<Settings />} />
      </Routes>
    </Suspense>
  );
}

// ✅ 正确 - 组件级分割
const HeavyChart = lazy(() => import('./HeavyChart'));

function DashboardPage() {
  return (
    <div>
      <h1>仪表板</h1>
      <Suspense fallback={<div>加载图表...</div>}>
        <HeavyChart />
      </Suspense>
    </div>
  );
}
```

## Bundle 优化

【必须】优化打包体积：

```tsx
// ✅ 正确 - 按需导入
import { debounce, throttle } from 'lodash-es';
import { format, parseISO } from 'date-fns';

// ❌ 错误 - 导入整个库
import _ from 'lodash';
import moment from 'moment';

// ✅ 正确 - 动态导入重型库
async function loadChart() {
  const { Chart } = await import('chart.js');
  return Chart;
}

// ✅ 正确 - Tree Shaking 配置
// package.json
{
  "sideEffects": false, // 启用 tree shaking
  "type": "module"
}
```

## React 渲染优化

【必须】合理使用 React 优化：

```tsx
// ✅ 正确 - React.memo
const UserCard = React.memo(function UserCard({ user, onEdit }: UserCardProps) {
  return (
    <div>
      <h3>{user.name}</h3>
      <button onClick={() => onEdit(user)}>编辑</button>
    </div>
  );
});

// ✅ 正确 - useMemo 缓存计算结果
function UserList({ users }: { users: User[] }) {
  const sortedUsers = useMemo(() => {
    return users.sort((a, b) => a.name.localeCompare(b.name));
  }, [users]);

  return (
    <div>
      {sortedUsers.map(user => (
        <UserCard key={user.id} user={user} />
      ))}
    </div>
  );
}

// ✅ 正确 - useCallback 缓存函数
function TodoList({ todos, onToggle }: TodoListProps) {
  const handleToggle = useCallback((id: string) => {
    onToggle(id);
  }, [onToggle]);

  return (
    <div>
      {todos.map(todo => (
        <TodoItem key={todo.id} todo={todo} onToggle={handleToggle} />
      ))}
    </div>
  );
}
```

## 用户交互优化

【必须】实现防抖和节流：

```tsx
// ✅ 正确 - 防抖 Hook
function useDebounce<T>(value: T, delay: number): T {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => clearTimeout(handler);
  }, [value, delay]);

  return debouncedValue;
}

// ✅ 正确 - 搜索防抖
function SearchInput({ onSearch }: { onSearch: (query: string) => void }) {
  const [query, setQuery] = useState('');
  const debouncedQuery = useDebounce(query, 300);

  useEffect(() => {
    if (debouncedQuery) {
      onSearch(debouncedQuery);
    }
  }, [debouncedQuery, onSearch]);

  return (
    <input
      value={query}
      onChange={(e) => setQuery(e.target.value)}
      placeholder="搜索..."
    />
  );
}

// ✅ 正确 - 节流 Hook  
function useThrottle<T>(value: T, delay: number): T {
  const [throttledValue, setThrottledValue] = useState<T>(value);
  const lastRan = useRef(Date.now());

  useEffect(() => {
    const handler = setTimeout(() => {
      if (Date.now() - lastRan.current >= delay) {
        setThrottledValue(value);
        lastRan.current = Date.now();
      }
    }, delay - (Date.now() - lastRan.current));

    return () => clearTimeout(handler);
  }, [value, delay]);

  return throttledValue;
}
```

## 缓存策略

【推荐】实现基础缓存：

```tsx
// ✅ 正确 - React Query 缓存
import { useQuery } from '@tanstack/react-query';

function useUserData(userId: string) {
  return useQuery({
    queryKey: ['user', userId],
    queryFn: () => fetchUser(userId),
    staleTime: 5 * 60 * 1000, // 5分钟缓存
    cacheTime: 10 * 60 * 1000, // 10分钟后清除
  });
}

// ✅ 正确 - 内存缓存
const cache = new Map<string, { data: any; timestamp: number }>();

function getCachedData(key: string, ttl: number = 300000) {
  const cached = cache.get(key);
  if (cached && Date.now() - cached.timestamp < ttl) {
    return cached.data;
  }
  return null;
}

function setCachedData(key: string, data: any) {
  cache.set(key, { data, timestamp: Date.now() });
}
```

## 内存泄漏防护

【必须】清理副作用：

```tsx
// ✅ 正确 - 清理事件监听器
function WindowSizeTracker() {
  const [size, setSize] = useState({ width: 0, height: 0 });

  useEffect(() => {
    function handleResize() {
      setSize({
        width: window.innerWidth,
        height: window.innerHeight,
      });
    }

    window.addEventListener('resize', handleResize);
    
    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, []);

  return <div>{size.width} x {size.height}</div>;
}

// ✅ 正确 - 清理定时器
function Timer() {
  const [count, setCount] = useState(0);

  useEffect(() => {
    const interval = setInterval(() => {
      setCount(prev => prev + 1);
    }, 1000);

    return () => clearInterval(interval);
  }, []);

  return <div>计数: {count}</div>;
}
```

## 虚拟滚动

【推荐】处理大量数据：

```tsx
import { FixedSizeList as List } from 'react-window';

// ✅ 正确 - 虚拟滚动
function VirtualizedList({ items }: { items: any[] }) {
  const Row = ({ index, style }: { index: number; style: React.CSSProperties }) => (
    <div style={style}>
      <UserCard user={items[index]} />
    </div>
  );

  return (
    <List
      height={600}
      itemCount={items.length}
      itemSize={80}
      width="100%"
    >
      {Row}
    </List>
  );
}
```

## 检查清单

部署前确认：
- [ ] **核心指标**：LCP < 2.5s, FID < 100ms, CLS < 0.1
- [ ] **Bundle 大小**：主包 < 250KB，按需导入第三方库
- [ ] **图片优化**：使用 WebP 格式和懒加载
- [ ] **代码分割**：路由和重型组件正确分割
- [ ] **React 优化**：合理使用 memo、useMemo、useCallback
- [ ] **用户交互**：搜索防抖、滚动节流
- [ ] **内存管理**：清理所有事件监听器和定时器
- [ ] **错误处理**：关键组件有错误边界保护
- [ ] **缓存策略**：API 数据适当缓存
- [ ] **虚拟滚动**：大列表使用虚拟滚动

