---
description: 
globs: 
alwaysApply: false
---
# API 设计规范

## RESTful API 设计原则

【必须】遵循 REST 架构风格：

```typescript
// ✅ 正确 - RESTful 路由设计
interface ApiRoutes {
  'GET /api/users': { response: PaginatedResponse<User> };
  'GET /api/users/:id': { params: { id: string }; response: ApiResponse<User> };
  'POST /api/users': { body: CreateUserRequest; response: ApiResponse<User> };
  'PUT /api/users/:id': { params: { id: string }; body: UpdateUserRequest; response: ApiResponse<User> };
  'DELETE /api/users/:id': { params: { id: string }; response: ApiResponse<null> };
}

// ✅ 正确 - HTTP 方法使用
const HTTP_METHODS = {
  GET: '获取资源，幂等，无副作用',
  POST: '创建资源或执行操作',
  PUT: '完整更新资源，幂等',
  PATCH: '部分更新资源，幂等',
  DELETE: '删除资源，幂等',
} as const;
```

## 统一响应格式

【必须】使用一致的响应结构：

```typescript
// ✅ 正确 - 基础响应格式
interface ApiResponse<T = any> {
  success: boolean;
  data: T;
  message: string;
  timestamp: string;
}

// ✅ 正确 - 分页响应格式
interface PaginatedResponse<T> extends ApiResponse<T[]> {
  pagination: {
    page: number;
    limit: number;
    total: number;
    hasNext: boolean;
    hasPrev: boolean;
  };
}

// ✅ 正确 - 错误响应格式
interface ErrorResponse {
  success: false;
  error: {
    code: string;
    message: string;
    field?: string; // 验证错误时的字段名
  };
  timestamp: string;
}

// ✅ 正确 - 响应构建器
const createResponse = {
  success: <T>(data: T, message = 'Success'): ApiResponse<T> => ({
    success: true,
    data,
    message,
    timestamp: new Date().toISOString(),
  }),
  
  error: (code: string, message: string, field?: string): ErrorResponse => ({
    success: false,
    error: { code, message, field },
    timestamp: new Date().toISOString(),
  }),
};
```

## HTTP 状态码规范

【必须】正确使用常用状态码：

```typescript
const HTTP_STATUS = {
  // 成功
  200: 'OK - 请求成功',
  201: 'Created - 资源创建成功', 
  204: 'No Content - 删除成功',
  
  // 客户端错误
  400: 'Bad Request - 请求参数错误',
  401: 'Unauthorized - 未认证',
  403: 'Forbidden - 无权限',
  404: 'Not Found - 资源不存在',
  422: 'Unprocessable Entity - 验证失败',
  
  // 服务器错误
  500: 'Internal Server Error - 服务器错误',
} as const;

// ✅ 使用示例
app.get('/api/users/:id', async (req, res) => {
  const user = await userService.findById(req.params.id);
  if (!user) {
    return res.status(404).json(
      createResponse.error('USER_NOT_FOUND', '用户不存在')
    );
  }
  res.status(200).json(createResponse.success(user));
});
```

## 请求验证

【必须】验证所有输入数据：

```typescript
import { z } from 'zod';

// ✅ 正确 - 定义验证模式
const CreateUserSchema = z.object({
  name: z.string().min(1).max(100),
  email: z.string().email(),
  role: z.enum(['admin', 'user']).default('user'),
});

const PaginationSchema = z.object({
  page: z.coerce.number().int().min(1).default(1),
  limit: z.coerce.number().int().min(1).max(100).default(20),
});

// ✅ 正确 - 验证中间件
function validateBody<T extends z.ZodSchema>(schema: T) {
  return (req: Request, res: Response, next: NextFunction) => {
    try {
      req.body = schema.parse(req.body);
      next();
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(422).json(
          createResponse.error('VALIDATION_ERROR', '数据验证失败')
        );
      }
      next(error);
    }
  };
}

// ✅ 使用示例
app.post('/api/users', 
  validateBody(CreateUserSchema),
  async (req, res) => {
    const user = await userService.create(req.body);
    res.status(201).json(createResponse.success(user));
  }
);
```

## 错误码规范

【必须】使用统一的错误码：

```typescript
const ERROR_CODES = {
  // 通用错误
  INTERNAL_ERROR: 'E1000',
  INVALID_REQUEST: 'E1001', 
  UNAUTHORIZED: 'E1002',
  FORBIDDEN: 'E1003',
  NOT_FOUND: 'E1004',
  
  // 验证错误
  VALIDATION_ERROR: 'E2000',
  INVALID_EMAIL: 'E2001',
  
  // 业务错误
  USER_NOT_FOUND: 'E3000',
  USER_ALREADY_EXISTS: 'E3001',
  INVALID_CREDENTIALS: 'E3002',
} as const;

// ✅ 全局错误处理
function errorHandler(err: Error, req: Request, res: Response, next: NextFunction) {
  console.error('API Error:', err);
  
  // 根据错误类型返回适当的状态码和消息
  if (err.message.includes('not found')) {
    return res.status(404).json(
      createResponse.error(ERROR_CODES.NOT_FOUND, '资源不存在')
    );
  }
  
  res.status(500).json(
    createResponse.error(ERROR_CODES.INTERNAL_ERROR, '服务器内部错误')
  );
}
```

## API 版本控制

【推荐】使用 URL 版本控制：

```typescript
// ✅ 正确 - URL 版本控制
app.get('/api/v1/users/:id', userController.getUserV1);
app.get('/api/v2/users/:id', userController.getUserV2);

// ✅ 版本兼容处理
interface UserV1 {
  id: string;
  name: string;
  email: string;
}

interface UserV2 extends UserV1 {
  profile: {
    avatar: string;
    bio: string;
  };
}
```

## 安全和性能

【必须】实现基础安全措施：

```typescript
// ✅ 认证中间件
function authenticate(req: Request, res: Response, next: NextFunction) {
  const token = req.headers.authorization?.replace('Bearer ', '');
  if (!token) {
    return res.status(401).json(
      createResponse.error(ERROR_CODES.UNAUTHORIZED, '缺少认证令牌')
    );
  }
  // 验证 token 逻辑
  next();
}

// ✅ 基础速率限制
import rateLimit from 'express-rate-limit';

const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 分钟
  max: 100, // 最多 100 个请求
  message: createResponse.error('RATE_LIMITED', '请求过于频繁'),
});

app.use('/api/', apiLimiter);
```

## 🔍 检查清单

### API 设计核心 [P0]
- [ ] **[P0]** RESTful 设计：遵循资源导向原则，正确使用 HTTP 方法 (GET, POST, PUT, DELETE)？
- [ ] **[P0]** 统一响应：所有 API 响应是否遵循统一的成功和错误格式 (e.g., `success`, `data`, `error`, `message`, `timestamp`)？
- [ ] **[P0]** HTTP 状态码：是否根据操作结果正确使用 HTTP 状态码 (2xx, 4xx, 5xx)？
- [ ] **[P0]** 输入验证：所有来自客户端的输入（body, query, params）是否都经过严格验证 (e.g.,使用 Zod)？
- [ ] **[P0]** 错误处理：是否定义并使用统一的错误码规范，并在错误发生时返回结构化的错误信息？
- [ ] **[P0]** 安全基础：是否已实施必要的认证和授权机制保护 API 端点？

### API 质量与可维护性 [P1]
- [ ] **[P1]** 分页实现：对于列表类型的响应，是否正确实现分页逻辑 (e.g., `page`, `limit`, `total`)？
- [ ] **[P1]** API 版本控制：如 API 发生重大变更，是否有明确的版本控制策略 (e.g., URL 版本 `/api/v1/users`)？
- [ ] **[P1]** 速率限制：是否对 API 请求实施了速率限制以防止滥用？
- [ ] **[P1]** 幂等性考虑：POST, PUT, PATCH, DELETE 等操作是否考虑了幂等性？
- [ ] **[P1]** 文档完整：API 是否有对应的、更新及时的文档 (e.g., OpenAPI/Swagger)？

### 性能与细节 [P2]
- [ ] **[P2]** 缓存策略：是否为可缓存的 GET 请求设计了合适的缓存机制？
- [ ] **[P2]** 字段选择：是否允许客户端通过参数选择返回的字段以减少数据传输？
- [ ] **[P2]** 批量操作：对于需要批量处理的场景，是否提供了批量操作的 API 端点？
